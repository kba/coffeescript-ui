
%input_background_border_style {
    border: 1px solid $input_border_color;
    &:not(:disabled):hover {
        background-color: $input_highlight_background_color;
        border-color: $input_highlight_border_color;
        transition: background-color ease $default_animation_speed, border-color ease $default_animation_speed;
    }

    box-sizing: border-box;
}

%input_style{

    //TODO other browsers!?
    &::-webkit-input-placeholder
    {
        color: $input_placeholder_font_color;
    }

    //structure
    line-height: $button_line_height;
    padding: $button_and_input_padding_y $button_and_input_padding_x !important; //important needed for overwriting very specific reset.scss
    margin: 0;
    box-sizing: border-box;
}


.cui-data-field-input {

    @include flex_display(inline-flex); //dont fill out the whole td if there is one

    //path need to be specific! otherwise we should use .cui-data-field-input:not(.cui-data-table)
    //we use cui-data-field-input as base class and not cui-input cause textareas etc. are shared by multiinput and input.
    &,
    > div { //TODO whats this div here
        > .cui-textarea {
            resize: none;
            min-height: 42px; //== 2 lines
        }

        > .cui-textarea,
        > .cui-input,
        > .cui-password,
        > .cui-date-time {
            width: 100%;   //follow the width that is set on cui-data-field
            @extend %input_background_border_style;
            @extend %input_style;
        }
    }


    //buttons should not automatically maximize TODO find a more basic solution, maybe this could be a basic button behaviour
    &.cui-vertical-layout {
        > .cui-vertical-layout-center {
            > .cui-button {
                @include flex_align_self(flex-start);
            }
        }
    }

}
